name: Commit Message Check

on:
  workflow_call:
    inputs:
      bypassCommitCheck:
        description: 'Set to true to bypass the commit message check.'
        required: false
        type: boolean

jobs:
  check_commit_message:
    runs-on: ubuntu-latest
    if: ${{ inputs.bypassCommitCheck != 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Commit Messages
        shell: bash
        run: |
          # Retrieve the last commit messages. For merge commits, it will retrieve the latest commit message.
          COMMIT_MSGS=$(git log --pretty=format:"%s" -n 1)
        
          # Define a regular expression to match the conventional commit pattern or a standard merge commit message
          CONVENTIONAL_REGEX="^(feat|fix|chore|docs|style|refactor|perf|test|build|ci|revert|wip)(\\(.+\\))?:\\s.+"
          MERGE_COMMIT_REGEX="^Merge (branch|remote-tracking branch) '.*'( into .*)?$"
        
          # Loop through each commit message and check against the patterns
          for COMMIT_MSG in "$COMMIT_MSGS"; do
            if [[ ! $COMMIT_MSG =~ $CONVENTIONAL_REGEX && ! $COMMIT_MSG =~ $MERGE_COMMIT_REGEX ]]; then
              echo "::error::Commit message '$COMMIT_MSG' does not follow the Conventional Commits format or merge commit format. Please use a message like 'feat: add new feature' or 'fix(scope): correct issue'."
              exit 1
            else
              echo "Commit message '$COMMIT_MSG' is valid."
            fi
          done